---
title: "Simulations"
date: "August 28, 2018"
---

## Scenario data modelling

Values separated by commas imply there is a discrete option between one value and the other. Values separated by dashes imply an integer range between the two values. Unless specified, all values are generated using a **uniform random distribution** for continuous values or a random sampling with replacement for integer values.

\* These values are deterministic, they are fixed in advance for the scenario.

### Sets

|Code|Parameter | Value | 
|----|----|----|
|$\mid I \mid$|Number of resources\*             | 10, 30, 50, 130, 150, 200|
|$C^{max}$|Maintenance capacity\*           | $\lceil 0.2 \times \mid I \mid \rceil$      |
|$\mid J \mid$|Total number of special tasks\*    | 4, 6, 8                 |
|$\mid T \mid$ |Number of periods\*               | 60, 90, 120, 180        |
|$\mid Y \mid$|Number of types\*                    | 1 - 5                   |
|$\mid Q \mid$|Number of standards per type\*       | 1 - 3                   |
<!-- |$\mid I \mid$|Total number of regular tasks\*    | 1 per type              | -->

### Maintenances

|Code|Parameter | Value | 
|----|----|----|
|$E^{M}$|Time limit in periods\*    |  40, 60, 80             |
|$E^{m}$|Time limit in periods\*    | $(E^{M} - 20)$            |
|$H^{M}$|Flight hours limit\*       | 800, 1000, 1200         |
|$M$|Maintenance duration\*     | 4, 6, 8                 |

### Tasks

#### Alternative 1

Two types of tasks will be generated. The difference between the two being the nature of the configuration choice.

|Code|Parameter | Special | Training |
|----| ---- | ---- | ---- |
|$MT_j$     |Minimum assignment (periods)   | 2, 3, 6              |    1               |        
|           |Start (periods)                | 6 - 36               | horizon's start     | 
|$\mid {T}_j \mid$|Duration (periods)             | 6 - 36               | $\mid T \mid$  | 
|$R_j$      |Number of required resources   | 2 - 5                |  0.5, 1, 1.5 times present value  |        
|$H_j$      |Number of required hours       | 50, 60, 70, 80       | 23                 |
||Compatibility                  | Total, type+standard | type               |

#### Alternative 2

Only one type of tasks is generated. The Special one.

|Code|Parameter | Special |
|----| ---- | ---- | 
|$MT_j$     |Minimum assignment (periods)   | 2, 3, 6              |
|           |Start (periods)                | 6 - 36               |
|$\mid {T}_j \mid$|Duration (periods)             | 6 - 36               |
|$R_j$      |Number of required resources   | 2 - 5                |
|$H_j$      |Number of required hours       | 50, 60, 70, 80       |
|$Y_j$      |Type                             | choice                     |
|$Q_j$      |Standard                         | choice                     |

On the other hand, every resource will, when not assigned a task and not in maintenance, consume the following amount of hours each month.
This option has the benefit of being closer to the original problem and having a smaller problem to solve.

|Code|Parameter | Training |
|----| ---- | ---- | 
|$R^{min}_j$|Number of required hours   | 15 - 25|

### Fleet

|Code|Parameter | Value |
|----|----|----|
|$Y_i$           |Type                           | choice                     |
|$Q_i$           |Standard                       | choice                     |

#### Initial state

|Code|Parameter | Value |
|----|----|----|
| $N$ |Total number of resources under maintenance    | $0 - C^{max}$|
|$Ret^{Init}_{i}$|Remaining elapsed periods      | 0 - $E^{M}$ |
|$Rut^{Init}_{i}$|Remaining usage hours          | 0 - $H^{M}$ |
|$N_i$           |Remaining maintenance months    | 0 - $M$     |

The initial state of the fleet will be simulated according to the following rule:

* $N$ resources will be taken randomly from the set of resources $I$.
* For these resources, the $N_i$ will be calculated.
* For the rest of resources, the $Rut^{Init}_{i}$ and $Ret^{Init}_{i}$ will be calculated.

### Task-resource compatibility

There's going to be two configurations of compatibility. In the first case, all resources will be able to do all tasks. This implies $\mid Y \mid=1$ and $\mid Q \mid=1$. 

The second implies generating random types and standards for each resource and task. In order to have a meaningful instance, a correct methodology needs to be followed.

Regarding tasks:

1. For each task, a type $Y_j \in Y$ and a standard $Q_j \in Q$ will be assigned.
2. A minimum number of resources of each type is calculated based on $\sum_{\{j \in J \mid Y_j=y\}} R_j \,,\forall y$.

Regarding resources:

1. For each type, a number of resources with type $Y_i \in Y$ is randomly generated based on this minimum.
2. Similarly, a number of resources of standard $Q_i \in Q$ is randomly generated based on a similar minimum. Here, it's important to notice that since standards are cumulative, resources of standard $q$ can do tasks of standards $\{q' \in Q \mid q' <= q\}$ (e.g. resources of standard 1 can only do tasks of standards [0, 1]).


## Instances and experimentation

A scenario will consist on a single configuration of the parameters marked with an asterisk.

An instance will consist on a randomly generated set of input data based on the configuration for a specific scenario.
50 instances will be created for each scenario. They will be tested for feasibility.

